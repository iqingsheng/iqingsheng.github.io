{"meta":{"title":"IPXX.PRO","subtitle":"","description":"一万年太久，只争朝夕","author":"NZgong","url":"https://nzgong.com","root":"/"},"pages":[{"title":"关于","date":"2021-06-28T09:20:45.000Z","updated":"2021-07-02T08:04:18.856Z","comments":true,"path":"about/index.html","permalink":"https://nzgong.com/about/index.html","excerpt":"","text":"免责声明本站的内容均基于署名-非商业性使用-相同方式共享 2.5 中国大陆(CC BY-NC-SA 2.5 CN) 协议创作或转载，您可以转载分享，但同时保留原文链接 本站提供的所有内容仅供学习、分享与交流，不保证内容的正确性。通过使用本站内容随之而来的风险与本站无关。当使用本站时，代表你已接受本站的免费声明和隐私原则等条款 本站的部分文章及资源文件信息来自于网络，并非本站所有，如有侵权请自觉联系博主删除"},{"title":"","date":"2021-07-02T11:23:55.320Z","updated":"2021-07-01T02:14:39.422Z","comments":true,"path":"manifest.json","permalink":"https://nzgong.com/manifest.json","excerpt":"","text":"{\"name\":\"NZgong's Blog\",\"short_name\":\"NZgong\",\"theme_color\":\"#49b1f5\",\"background_color\":\"#49b1f5\",\"display\":\"minimal-ui\",\"scope\":\"/\",\"start_url\":\"/\",\"icons\":[{\"src\":\"https://snow.js.org/image/pwaicons/192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\"}],\"splash_pages\":null}"},{"title":"说说","date":"2021-07-02T11:23:55.304Z","updated":"2021-06-29T18:16:05.459Z","comments":false,"path":"artitalk/index.html","permalink":"https://nzgong.com/artitalk/index.html","excerpt":"","text":""},{"title":"番剧","date":"2021-06-28T14:32:34.000Z","updated":"2021-06-29T18:20:55.760Z","comments":true,"path":"bangumis/index.html","permalink":"https://nzgong.com/bangumis/index.html","excerpt":"","text":""},{"title":"书单","date":"2021-06-28T14:34:29.000Z","updated":"2021-06-29T13:41:52.031Z","comments":true,"path":"books/index.html","permalink":"https://nzgong.com/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-06-28T09:14:11.000Z","updated":"2021-06-30T05:23:10.621Z","comments":false,"path":"categories/index.html","permalink":"https://nzgong.com/categories/index.html","excerpt":"","text":""},{"title":"网站统计","date":"2021-06-29T06:46:00.000Z","updated":"2021-06-30T07:12:04.435Z","comments":false,"path":"charts/index.html","permalink":"https://nzgong.com/charts/index.html","excerpt":"","text":""},{"title":"留言板","date":"2021-06-28T14:42:19.000Z","updated":"2021-06-29T18:03:01.758Z","comments":true,"path":"comments/index.html","permalink":"https://nzgong.com/comments/index.html","excerpt":"","text":""},{"title":"","date":"2021-07-02T11:23:55.320Z","updated":"2021-06-30T05:33:59.943Z","comments":true,"path":"css/iconfont.css","permalink":"https://nzgong.com/css/iconfont.css","excerpt":"","text":"@font-face { font-family: \"iconfont\"; /* Project id 2641600 */ src: url('//at.alicdn.com/t/font_2641600_u3ja0ojeg0j.woff2?t=1625031214466') format('woff2'), url('//at.alicdn.com/t/font_2641600_u3ja0ojeg0j.woff?t=1625031214466') format('woff'), url('//at.alicdn.com/t/font_2641600_u3ja0ojeg0j.ttf?t=1625031214466') format('truetype'); } .iconfont { font-family: \"iconfont\" !important; font-size: 16px; font-style: normal; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } .icon-android-fill:before { content: \"\\e881\"; } .icon-apple-fill:before { content: \"\\e882\"; } .icon-QQ:before { content: \"\\e883\"; } .icon-wechat-fill:before { content: \"\\e884\"; } .icon-github-fill:before { content: \"\\e885\"; } .icon-weibo-circle-fill:before { content: \"\\e88a\"; } .icon-zhihu-circle-fill:before { content: \"\\e88b\"; } .icon-bug:before { content: \"\\e8e9\"; } .icon-whatsapp:before { content: \"\\e8ea\"; } .icon-caret-right:before { content: \"\\e8ec\"; } .icon-fast-backward:before { content: \"\\e8ed\"; } .icon-fast-forward:before { content: \"\\e8ee\"; } .icon-eye-close:before { content: \"\\e8ff\"; } .icon-time-circle:before { content: \"\\e784\"; } .icon-play-circle:before { content: \"\\e781\"; } .icon-smile:before { content: \"\\e783\"; } .icon-earth:before { content: \"\\e782\"; } .icon-message:before { content: \"\\e78a\"; } .icon-barchart:before { content: \"\\e7af\"; } .icon-bulb:before { content: \"\\e7c3\"; } .icon-rest:before { content: \"\\e7c4\"; } .icon-home:before { content: \"\\e7c6\"; } .icon-customerservice:before { content: \"\\e7ca\"; } .icon-rocket:before { content: \"\\e7ce\"; } .icon-folder:before { content: \"\\e7d1\"; } .icon-calendar:before { content: \"\\e7d3\"; } .icon-camera:before { content: \"\\e7d7\"; } .icon-read:before { content: \"\\e7d8\"; } .icon-video:before { content: \"\\e7da\"; } .icon-image:before { content: \"\\e7de\"; } .icon-mail:before { content: \"\\e7df\"; } .icon-link:before { content: \"\\e7e2\"; } .icon-tag:before { content: \"\\e7e4\"; } .icon-comment:before { content: \"\\e8e8\"; }"},{"title":"","date":"2021-07-02T11:23:55.320Z","updated":"2021-07-02T09:22:15.099Z","comments":true,"path":"css/mycss.css","permalink":"https://nzgong.com/css/mycss.css","excerpt":"","text":"body { cursor: url(https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/default.cur), default; } a, img { cursor: url(https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/pointer.cur), default; } /* 滚动条 */ ::-webkit-scrollbar { width: 8px; height: 8px; } ::-webkit-scrollbar-track { background-color: rgba(73, 177, 245, 0.2); border-radius: 2em; } ::-webkit-scrollbar-thumb { background-color: #49b1f5; background-image: -webkit-linear-gradient( 45deg, rgba(255, 255, 255, 0.4) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.4) 50%, rgba(255, 255, 255, 0.4) 75%, transparent 75%, transparent ); border-radius: 2em; } ::-webkit-scrollbar-corner { background-color: transparent; } ::-moz-selection { color: #fff; background-color: #49b1f5; } #aside_content .card-archives ul.card-archive-list > .card-archive-list-item a span:first-child, #aside_content .card-categories ul.card-category-list > .card-category-list-item a span:first-child { width: auto; min-width: 50%; }"},{"title":"相册","date":"2021-06-28T09:20:24.000Z","updated":"2021-06-30T07:20:22.823Z","comments":true,"path":"gallery/index.html","permalink":"https://nzgong.com/gallery/index.html","excerpt":"","text":"壁纸 收藏的一些壁纸"},{"title":"游戏","date":"2021-06-28T14:35:05.000Z","updated":"2021-06-29T18:21:19.582Z","comments":true,"path":"games/index.html","permalink":"https://nzgong.com/games/index.html","excerpt":"","text":""},{"title":"imgs","date":"2021-06-28T09:14:52.000Z","updated":"2021-06-29T13:41:52.034Z","comments":true,"path":"imgs/index.html","permalink":"https://nzgong.com/imgs/index.html","excerpt":"","text":""},{"title":"","date":"2021-07-02T11:23:55.320Z","updated":"2014-03-29T03:28:12.000Z","comments":true,"path":"js/index.js","permalink":"https://nzgong.com/js/index.js","excerpt":"","text":"/*How to Draw Batman icon on pure css Version 0.0.1 Using the special application */"},{"title":"","date":"2021-07-02T11:23:55.320Z","updated":"2021-06-29T13:41:52.035Z","comments":true,"path":"js/js01.js","permalink":"https://nzgong.com/js/js01.js","excerpt":"","text":"var mobile_sidebar_menus = document.getElementById(\"mobile-sidebar-menus\"); var menus_item_child = mobile_sidebar_menus.getElementsByClassName( \"menus_item_child\" ); var menus_expand = mobile_sidebar_menus.getElementsByClassName(\"menus-expand\"); for (var i = 0; i < menus_item_child.length; i++) { menus_item_child[i].style.display = \"none\"; menus_expand[i].className += \" menus-closed\"; } var card_category_list = document.getElementsByClassName( \"card-category-list child\" ); var item = document.getElementsByClassName(\"card-category-list-item\"); function toggle(t) { var display = t.parentElement.nextSibling.style.display; if (display == \"none\") { t.parentElement.nextSibling.style.display = \"block\"; t.parentElement.nextSibling.style.height = \"100%\"; t.className = t.className.replace(\"fa-chevron-up\", \"fa-chevron-down\"); } else { t.parentElement.nextSibling.style.display = \"none\"; t.className = t.className.replace(\"fa-chevron-down\", \"fa-chevron-up\"); } } for (var i = 0; i < card_category_list.length; i++) { card_category_list[i].style.display = \"none\"; card_category_list[i].style.transition = \"all 1s\"; card_category_list[i].previousSibling.innerHTML += ''; }"},{"title":"友链","date":"2021-06-28T09:14:18.000Z","updated":"2021-07-01T09:40:47.971Z","comments":true,"path":"link/index.html","permalink":"https://nzgong.com/link/index.html","excerpt":"","text":"关于友链将本站添加至你的网站后，在我的友链界面评论你的网站信息，即可添加友链哦 友链信息name: NZgong desc: 一万年太久，只争朝夕 link: https://nzgong.com avatar: https://cdn.jsdelivr.net/gh/nzgong/IMG/v284ffa8785492e180044063ac546a2b5f_720w"},{"title":"电影","date":"2021-06-28T09:20:38.000Z","updated":"2021-06-29T18:22:34.781Z","comments":true,"path":"movies/index.html","permalink":"https://nzgong.com/movies/index.html","excerpt":"","text":""},{"title":"音乐","date":"2021-06-28T09:20:14.000Z","updated":"2021-06-29T13:41:52.036Z","comments":true,"path":"music/index.html","permalink":"https://nzgong.com/music/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-06-28T09:13:58.000Z","updated":"2021-06-30T05:22:12.636Z","comments":false,"path":"tags/index.html","permalink":"https://nzgong.com/tags/index.html","excerpt":"","text":""},{"title":"wallpaper","date":"2021-06-29T08:07:02.000Z","updated":"2021-06-29T13:41:52.034Z","comments":true,"path":"gallery/wallpaper/index.html","permalink":"https://nzgong.com/gallery/wallpaper/index.html","excerpt":"","text":""},{"title":"","date":"2021-07-02T11:23:55.320Z","updated":"2014-03-29T11:29:56.000Z","comments":true,"path":"css/style.css","permalink":"https://nzgong.com/css/style.css","excerpt":"","text":"body{ margin: 0; height: 100%; } #animate > ol { list-style: none; margin: 0; padding: 0; } #animate > ol > li { margin: 0; padding: 0; display: none; } #animate > ol > li.run { display: block; } #animate .stage { overflow: hidden; margin: 0; padding: 0; } #animate .stage div { position: absolute; } #animate .stage { position: absolute; top: 0; left: 0; width: 100%; height: 100%; } #animate { height: 480px; width: 320px; position: relative; } #animate { margin: 0 auto; background-color: rgba(255,255,255,1); font-family: \"Helvetica Neue\", Arial, Helvetica, Geneva, sans-serif; font-size: 12px; line-height: 1.3; } #head-1 { transform: translate3d(67px, 127px, 0px); -webkit-transform: translate3d(67px, 127px, 0px); width: 183px; height: 183px; border-top: 0px solid rgba(1,14,13,1); border-right: 0px solid rgba(1,14,13,1); border-bottom: 0px solid rgba(1,14,13,1); border-left: 0px solid rgba(1,14,13,1); border-top-left-radius: 500px; -webkit-border-top-left-radius: 500px; border-top-right-radius: 500px; -webkit-border-top-right-radius: 500px; border-bottom-right-radius: 500px; -webkit-border-bottom-right-radius: 500px; border-bottom-left-radius: 500px; -webkit-border-bottom-left-radius: 500px; background-color: rgba(194,194,194,1); top: 0; left: 0; z-index: 2; ; } @-webkit-keyframes ani-head-1-0 { 0% { -webkit-transform: translate3d(-322.74999999999994px, 121.99999999999994px, 0px); background-color: rgba(53,53,53,1); } 98.912% { -webkit-transform: translate3d(67px, 123px, 0px); background-color: rgba(53,53,53,1); } 100% { -webkit-transform: translate3d(67px, 123px, 0px); background-color: rgba(53,53,53,1); } } @keyframes ani-head-1-0 { 0% { transform: translate3d(-322.74999999999994px, 121.99999999999994px, 0px); background-color: rgba(53,53,53,1); } 98.912% { transform: translate3d(67px, 123px, 0px); background-color: rgba(53,53,53,1); } 100% { transform: translate3d(67px, 123px, 0px); background-color: rgba(53,53,53,1); } } .run.time #head-1 { animation-name: ani-head-1-0; -webkit-animation-name: ani-head-1-0; animation-duration: 1.011s; -webkit-animation-duration: 1.011s; animation-delay: 0s; -webkit-animation-delay: 0s; animation-fill-mode: both; -webkit-animation-fill-mode: both; } .time #head-1 { transform: translate3d(67px, 123px, 0px); -webkit-transform: translate3d(67px, 123px, 0px); background-color: rgba(53,53,53,1); } .restart.time #head-1 { transform: translate3d(-322.74999999999994px, 121.99999999999994px, 0px); -webkit-transform: translate3d(-322.74999999999994px, 121.99999999999994px, 0px); background-color: rgba(53,53,53,1); } .restart #head-1 { animation-name: none !important; -webkit-animation-name: none !important; } #head-2 { transform: translate3d(71px, 183px, 0px); -webkit-transform: translate3d(71px, 183px, 0px); width: 173px; height: 173px; border-top: 0px solid rgba(1,14,13,1); border-right: 0px solid rgba(1,14,13,1); border-bottom: 0px solid rgba(1,14,13,1); border-left: 0px solid rgba(1,14,13,1); border-top-left-radius: 500px; -webkit-border-top-left-radius: 500px; border-top-right-radius: 500px; -webkit-border-top-right-radius: 500px; border-bottom-right-radius: 500px; -webkit-border-bottom-right-radius: 500px; border-bottom-left-radius: 500px; -webkit-border-bottom-left-radius: 500px; background-color: rgba(194,194,194,1); top: 0; left: 0; z-index: 1; ; } @-webkit-keyframes ani-head-2-0 { 0% { -webkit-transform: translate3d(75.57142857142857px, 555.1428571428571px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(0deg) scale3d(0.91, 0.77, 1); -webkit-transform-origin: 50% 50%; background-color: rgba(53,53,53,1); } 100% { -webkit-transform: translate3d(73px, 186px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(0deg) scale3d(0.91, 0.77, 1); -webkit-transform-origin: 50% 50%; background-color: rgba(53,53,53,1); } } @keyframes ani-head-2-0 { 0% { transform: translate3d(75.57142857142857px, 555.1428571428571px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(0deg) scale3d(0.91, 0.77, 1); transform-origin: 50% 50%; background-color: rgba(53,53,53,1); } 100% { transform: translate3d(73px, 186px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(0deg) scale3d(0.91, 0.77, 1); transform-origin: 50% 50%; background-color: rgba(53,53,53,1); } } .run.time #head-2 { animation-name: ani-head-2-0; -webkit-animation-name: ani-head-2-0; animation-duration: 1.011s; -webkit-animation-duration: 1.011s; animation-delay: 0s; -webkit-animation-delay: 0s; animation-fill-mode: both; -webkit-animation-fill-mode: both; } .time #head-2 { transform: translate3d(73px, 186px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(0deg) scale3d(0.91, 0.77, 1); -webkit-transform: translate3d(73px, 186px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(0deg) scale3d(0.91, 0.77, 1); transform-origin: 50% 50%; -webkit-transform-origin: 50% 50%; background-color: rgba(53,53,53,1); } .restart.time #head-2 { transform: translate3d(75.57142857142857px, 555.1428571428571px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(0deg) scale3d(0.91, 0.77, 1); -webkit-transform: translate3d(75.57142857142857px, 555.1428571428571px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(0deg) scale3d(0.91, 0.77, 1); transform-origin: 50% 50%; -webkit-transform-origin: 50% 50%; background-color: rgba(53,53,53,1); } .restart #head-2 { animation-name: none !important; -webkit-animation-name: none !important; } #headear { transform: translate3d(-36px, 67px, 0px); -webkit-transform: translate3d(-36px, 67px, 0px); width: 127px; height: 189px; border-top: 1px solid rgba(1,14,13,1); border-right: 1px solid rgba(1,14,13,1); border-bottom: 1px solid rgba(1,14,13,1); border-left: 1px solid rgba(1,14,13,1); border-top-left-radius: 500px; -webkit-border-top-left-radius: 500px; border-top-right-radius: 500px; -webkit-border-top-right-radius: 500px; border-bottom-right-radius: 500px; -webkit-border-bottom-right-radius: 500px; border-bottom-left-radius: 500px; -webkit-border-bottom-left-radius: 500px; background-color: rgba(194,194,194,1); top: 0; left: 0; } @-webkit-keyframes ani-headear-0 { 0% { -webkit-transform: translate3d(94px, -354.6666666666667px, 0px) scale3d(1.44, 1.93, 1); background-color: rgba(53,53,53,1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } 100% { -webkit-transform: translate3d(95px, 129px, 0px) scale3d(1.44, 1.93, 1); background-color: rgba(53,53,53,1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } } @keyframes ani-headear-0 { 0% { transform: translate3d(94px, -354.6666666666667px, 0px) scale3d(1.44, 1.93, 1); background-color: rgba(53,53,53,1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } 100% { transform: translate3d(95px, 129px, 0px) scale3d(1.44, 1.93, 1); background-color: rgba(53,53,53,1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } } .run.time #headear { animation-name: ani-headear-0; -webkit-animation-name: ani-headear-0; animation-duration: 1s; -webkit-animation-duration: 1s; animation-delay: 0s; -webkit-animation-delay: 0s; animation-fill-mode: both; -webkit-animation-fill-mode: both; } .time #headear { transform: translate3d(95px, 129px, 0px) scale3d(1.44, 1.93, 1); -webkit-transform: translate3d(95px, 129px, 0px) scale3d(1.44, 1.93, 1); background-color: rgba(53,53,53,1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } .restart.time #headear { transform: translate3d(94px, -354.6666666666667px, 0px) scale3d(1.44, 1.93, 1); -webkit-transform: translate3d(94px, -354.6666666666667px, 0px) scale3d(1.44, 1.93, 1); background-color: rgba(53,53,53,1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } .restart #headear { animation-name: none !important; -webkit-animation-name: none !important; } #headear-radius { transform: translate3d(-8px, 67px, 0px) scale3d(1, 1, 1); -webkit-transform: translate3d(-8px, 67px, 0px) scale3d(1, 1, 1); width: 127px; height: 189px; border-top: 1px solid rgba(1,14,13,1); border-right: 1px solid rgba(1,14,13,1); border-bottom: 1px solid rgba(1,14,13,1); border-left: 1px solid rgba(1,14,13,1); border-top-left-radius: 500px; -webkit-border-top-left-radius: 500px; border-top-right-radius: 500px; -webkit-border-top-right-radius: 500px; border-bottom-right-radius: 500px; -webkit-border-bottom-right-radius: 500px; border-bottom-left-radius: 500px; -webkit-border-bottom-left-radius: 500px; background-color: rgba(194,194,194,1); top: 0; left: 0; } @-webkit-keyframes ani-headear-radius-0 { 0% { -webkit-transform: translate3d(94px, -287px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-0.2deg) scale3d(0.79, 0.66, 1); -webkit-transform-origin: 50% 50%; -webkit-box-shadow: 0px 0px 0px rgba(0,0,0,0.5); background-color: rgba(255,255,255,1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } 100% { -webkit-transform: translate3d(95px, 4px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-0.2deg) scale3d(0.79, 0.66, 1); -webkit-transform-origin: 50% 50%; -webkit-box-shadow: 0px 0px 0px rgba(0,0,0,0.5); background-color: rgba(255,255,255,1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } } @keyframes ani-headear-radius-0 { 0% { transform: translate3d(94px, -287px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-0.2deg) scale3d(0.79, 0.66, 1); transform-origin: 50% 50%; box-shadow: 0px 0px 0px rgba(0,0,0,0.5); background-color: rgba(255,255,255,1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } 100% { transform: translate3d(95px, 4px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-0.2deg) scale3d(0.79, 0.66, 1); transform-origin: 50% 50%; box-shadow: 0px 0px 0px rgba(0,0,0,0.5); background-color: rgba(255,255,255,1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } } .run.time #headear-radius { animation-name: ani-headear-radius-0; -webkit-animation-name: ani-headear-radius-0; animation-duration: 1.022s; -webkit-animation-duration: 1.022s; animation-delay: 1.0421s; -webkit-animation-delay: 1.0421s; animation-fill-mode: both; -webkit-animation-fill-mode: both; } .time #headear-radius { transform: translate3d(95px, 4px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-0.2deg) scale3d(0.79, 0.66, 1); -webkit-transform: translate3d(95px, 4px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-0.2deg) scale3d(0.79, 0.66, 1); transform-origin: 50% 50%; -webkit-transform-origin: 50% 50%; box-shadow: 0px 0px 0px rgba(0,0,0,0.5); -webkit-box-shadow: 0px 0px 0px rgba(0,0,0,0.5); background-color: rgba(255,255,255,1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } .restart.time #headear-radius { transform: translate3d(94px, -287px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-0.2deg) scale3d(0.79, 0.66, 1); -webkit-transform: translate3d(94px, -287px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-0.2deg) scale3d(0.79, 0.66, 1); transform-origin: 50% 50%; -webkit-transform-origin: 50% 50%; box-shadow: 0px 0px 0px rgba(0,0,0,0.5); -webkit-box-shadow: 0px 0px 0px rgba(0,0,0,0.5); background-color: rgba(255,255,255,1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } .restart #headear-radius { animation-name: none !important; -webkit-animation-name: none !important; } #white-square { transform: translate3d(65px, 206px, 0px); -webkit-transform: translate3d(65px, 206px, 0px); width: 186px; height: 200px; border-top: 1px solid rgba(1,14,13,1); border-right: 1px solid rgba(1,14,13,1); border-bottom: 1px solid rgba(1,14,13,1); border-left: 1px solid rgba(1,14,13,1); background-color: rgba(255,255,255,1); top: 0; left: 0; z-index: 0; ; } .time #white-square { transform: translate3d(65px, 206px, 0px); -webkit-transform: translate3d(65px, 206px, 0px); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } #face-left { transform: translate3d(71px, 288px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(24.1deg); -webkit-transform: translate3d(71px, 288px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(24.1deg); width: 120px; height: 106px; border-top: 0px solid rgba(1,14,13,1); border-right: 0px solid rgba(1,14,13,1); border-bottom: 0px solid rgba(1,14,13,1); border-left: 0px solid rgba(1,14,13,1); background-color: rgba(194,194,194,1); top: 0; left: 0; z-index: 3; ; } @-webkit-keyframes ani-face-left-0 { 0% { -webkit-transform: translate3d(-196px, -177px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(24.1deg) scale3d(0.77, 0.86, 1); background-color: rgba(54,54,54,1); } 100% { -webkit-transform: translate3d(79px, 164px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(24.1deg) scale3d(0.77, 0.86, 1); background-color: rgba(54,54,54,1); } } @keyframes ani-face-left-0 { 0% { transform: translate3d(-196px, -177px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(24.1deg) scale3d(0.77, 0.86, 1); background-color: rgba(54,54,54,1); } 100% { transform: translate3d(79px, 164px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(24.1deg) scale3d(0.77, 0.86, 1); background-color: rgba(54,54,54,1); } } .run.time #face-left { animation-name: ani-face-left-0; -webkit-animation-name: ani-face-left-0; animation-duration: 1.059s; -webkit-animation-duration: 1.059s; animation-delay: 3.0526s; -webkit-animation-delay: 3.0526s; animation-fill-mode: both; -webkit-animation-fill-mode: both; } .time #face-left { transform: translate3d(79px, 164px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(24.1deg) scale3d(0.77, 0.86, 1); -webkit-transform: translate3d(79px, 164px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(24.1deg) scale3d(0.77, 0.86, 1); background-color: rgba(54,54,54,1); } .restart.time #face-left { transform: translate3d(-196px, -177px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(24.1deg) scale3d(0.77, 0.86, 1); -webkit-transform: translate3d(-196px, -177px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(24.1deg) scale3d(0.77, 0.86, 1); background-color: rgba(54,54,54,1); } .restart #face-left { animation-name: none !important; -webkit-animation-name: none !important; } #face-right { transform: translate3d(186px, 355px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-22.7deg) scale3d(5.09, 4.9, 1); -webkit-transform: translate3d(186px, 355px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-22.7deg) scale3d(5.09, 4.9, 1); width: 20px; height: 20px; border-top: 0px solid rgba(1,14,13,1); border-right: 0px solid rgba(1,14,13,1); border-bottom: 0px solid rgba(1,14,13,1); border-left: 0px solid rgba(1,14,13,1); background-color: rgba(194,194,194,1); top: 0; left: 0; } @-webkit-keyframes ani-face-right-0 { 0% { -webkit-transform: translate3d(435px, -128px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-22.7deg) scale3d(4.4283, 3.8710000000000004, 1); z-index: 3; ;background-color: rgba(54,54,54,1); } 100% { -webkit-transform: translate3d(177px, 215px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-22.7deg) scale3d(4.4283, 3.8710000000000004, 1); z-index: 3; ;background-color: rgba(54,54,54,1); } } @keyframes ani-face-right-0 { 0% { transform: translate3d(435px, -128px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-22.7deg) scale3d(4.4283, 3.8710000000000004, 1); z-index: 3; ;background-color: rgba(54,54,54,1); } 100% { transform: translate3d(177px, 215px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-22.7deg) scale3d(4.4283, 3.8710000000000004, 1); z-index: 3; ;background-color: rgba(54,54,54,1); } } .run.time #face-right { animation-name: ani-face-right-0; -webkit-animation-name: ani-face-right-0; animation-duration: 1.059s; -webkit-animation-duration: 1.059s; animation-delay: 3.0526s; -webkit-animation-delay: 3.0526s; animation-fill-mode: both; -webkit-animation-fill-mode: both; } .time #face-right { transform: translate3d(177px, 215px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-22.7deg) scale3d(4.4283, 3.8710000000000004, 1); -webkit-transform: translate3d(177px, 215px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-22.7deg) scale3d(4.4283, 3.8710000000000004, 1); z-index: 3; ;background-color: rgba(54,54,54,1); } .restart.time #face-right { transform: translate3d(435px, -128px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-22.7deg) scale3d(4.4283, 3.8710000000000004, 1); -webkit-transform: translate3d(435px, -128px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-22.7deg) scale3d(4.4283, 3.8710000000000004, 1); z-index: 3; ;background-color: rgba(54,54,54,1); } .restart #face-right { animation-name: none !important; -webkit-animation-name: none !important; } #face { transform: translate3d(66px, 184px, 0px) scale3d(0.77, 0.6, 1); -webkit-transform: translate3d(66px, 184px, 0px) scale3d(0.77, 0.6, 1); width: 187px; height: 170px; border-top: 1px solid rgba(1,14,13,1); border-right: 1px solid rgba(1,14,13,1); border-bottom: 1px solid rgba(1,14,13,1); border-left: 1px solid rgba(1,14,13,1); border-top-left-radius: 20px; -webkit-border-top-left-radius: 20px; border-top-right-radius: 20px; -webkit-border-top-right-radius: 20px; border-bottom-right-radius: 100px; -webkit-border-bottom-right-radius: 100px; border-bottom-left-radius: 100px; -webkit-border-bottom-left-radius: 100px; background-color: rgba(194,194,194,1); top: 0; left: 0; z-index: 4; ; } @-webkit-keyframes ani-face-0 { 0% { -webkit-transform: translate3d(-219px, -145px, 0px) scale3d(0.77, 0.6, 1); z-index: 2; ;background-color: rgba(239,207,157,1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } 100% { -webkit-transform: translate3d(66px, 200px, 0px) scale3d(0.77, 0.6, 1); z-index: 2; ;background-color: rgba(239,207,157,1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } } @keyframes ani-face-0 { 0% { transform: translate3d(-219px, -145px, 0px) scale3d(0.77, 0.6, 1); z-index: 2; ;background-color: rgba(239,207,157,1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } 100% { transform: translate3d(66px, 200px, 0px) scale3d(0.77, 0.6, 1); z-index: 2; ;background-color: rgba(239,207,157,1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } } .run.time #face { animation-name: ani-face-0; -webkit-animation-name: ani-face-0; animation-duration: 1.0105s; -webkit-animation-duration: 1.0105s; animation-delay: 2.0316s; -webkit-animation-delay: 2.0316s; animation-fill-mode: both; -webkit-animation-fill-mode: both; } .time #face { transform: translate3d(66px, 200px, 0px) scale3d(0.77, 0.6, 1); -webkit-transform: translate3d(66px, 200px, 0px) scale3d(0.77, 0.6, 1); z-index: 2; ;background-color: rgba(239,207,157,1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } .restart.time #face { transform: translate3d(-219px, -145px, 0px) scale3d(0.77, 0.6, 1); -webkit-transform: translate3d(-219px, -145px, 0px) scale3d(0.77, 0.6, 1); z-index: 2; ;background-color: rgba(239,207,157,1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } .restart #face { animation-name: none !important; -webkit-animation-name: none !important; } #brow-right { transform: translate3d(-5px, 250px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-29deg) scale3d(1.18, 1, 1); -webkit-transform: translate3d(-5px, 250px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-29deg) scale3d(1.18, 1, 1); width: 184px; height: 149px; border-top: 1px solid rgba(1,14,13,1); border-right: 1px solid rgba(1,14,13,1); border-bottom: 1px solid rgba(1,14,13,1); border-left: 1px solid rgba(1,14,13,1); background-color: rgba(194,194,194,1); top: 0; left: 0; } @-webkit-keyframes ani-brow-right-0 { 0% { -webkit-transform: translate3d(420.85714285714283px, 114.14285714285717px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-29deg) scale3d(0.354, 0.35, 1); z-index: 6; ;border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(53,53,53,1); } 100% { -webkit-transform: translate3d(98px, 113px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-29deg) scale3d(0.354, 0.35, 1); z-index: 6; ;border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(53,53,53,1); } } @keyframes ani-brow-right-0 { 0% { transform: translate3d(420.85714285714283px, 114.14285714285717px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-29deg) scale3d(0.354, 0.35, 1); z-index: 6; ;border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(53,53,53,1); } 100% { transform: translate3d(98px, 113px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-29deg) scale3d(0.354, 0.35, 1); z-index: 6; ;border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(53,53,53,1); } } .run.time #brow-right { animation-name: ani-brow-right-0; -webkit-animation-name: ani-brow-right-0; animation-duration: 0.9309s; -webkit-animation-duration: 0.9309s; animation-delay: 5.0526s; -webkit-animation-delay: 5.0526s; animation-fill-mode: both; -webkit-animation-fill-mode: both; } .time #brow-right { transform: translate3d(98px, 113px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-29deg) scale3d(0.354, 0.35, 1); -webkit-transform: translate3d(98px, 113px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-29deg) scale3d(0.354, 0.35, 1); z-index: 6; ;border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(53,53,53,1); } .restart.time #brow-right { transform: translate3d(420.85714285714283px, 114.14285714285717px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-29deg) scale3d(0.354, 0.35, 1); -webkit-transform: translate3d(420.85714285714283px, 114.14285714285717px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(-29deg) scale3d(0.354, 0.35, 1); z-index: 6; ;border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(53,53,53,1); } .restart #brow-right { animation-name: none !important; -webkit-animation-name: none !important; } #eye-left { transform: translate3d(156px, 159px, 0px) scale3d(0.84, 0.84, 1); -webkit-transform: translate3d(156px, 159px, 0px) scale3d(0.84, 0.84, 1); width: 63px; height: 63px; border-top: 1px solid rgba(1,14,13,1); border-right: 1px solid rgba(1,14,13,1); border-bottom: 1px solid rgba(1,14,13,1); border-left: 1px solid rgba(1,14,13,1); border-top-left-radius: 500px; -webkit-border-top-left-radius: 500px; border-top-right-radius: 500px; -webkit-border-top-right-radius: 500px; border-bottom-right-radius: 500px; -webkit-border-bottom-right-radius: 500px; border-bottom-left-radius: 500px; -webkit-border-bottom-left-radius: 500px; background-color: rgba(194,194,194,1); top: 0; left: 0; z-index: 5; ; } @-webkit-keyframes ani-eye-left-0 { 0% { -webkit-transform: translate3d(170px, -126px, 0px) scale3d(0.84, 0.84, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } 100% { -webkit-transform: translate3d(168px, 182px, 0px) scale3d(0.84, 0.84, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } } @keyframes ani-eye-left-0 { 0% { transform: translate3d(170px, -126px, 0px) scale3d(0.84, 0.84, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } 100% { transform: translate3d(168px, 182px, 0px) scale3d(0.84, 0.84, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } } .run.time #eye-left { animation-name: ani-eye-left-0; -webkit-animation-name: ani-eye-left-0; animation-duration: 0.9309s; -webkit-animation-duration: 0.9309s; animation-delay: 4.1158s; -webkit-animation-delay: 4.1158s; animation-fill-mode: both; -webkit-animation-fill-mode: both; } .time #eye-left { transform: translate3d(168px, 182px, 0px) scale3d(0.84, 0.84, 1); -webkit-transform: translate3d(168px, 182px, 0px) scale3d(0.84, 0.84, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } .restart.time #eye-left { transform: translate3d(170px, -126px, 0px) scale3d(0.84, 0.84, 1); -webkit-transform: translate3d(170px, -126px, 0px) scale3d(0.84, 0.84, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } .restart #eye-left { animation-name: none !important; -webkit-animation-name: none !important; } #eye-right { transform: translate3d(41px, 350px, 0px); -webkit-transform: translate3d(41px, 350px, 0px); width: 50px; height: 50px; border-top: 1px solid rgba(1,14,13,1); border-right: 1px solid rgba(1,14,13,1); border-bottom: 1px solid rgba(1,14,13,1); border-left: 1px solid rgba(1,14,13,1); border-top-left-radius: 500px; -webkit-border-top-left-radius: 500px; border-top-right-radius: 500px; -webkit-border-top-right-radius: 500px; border-bottom-right-radius: 500px; -webkit-border-bottom-right-radius: 500px; border-bottom-left-radius: 500px; -webkit-border-bottom-left-radius: 500px; background-color: rgba(194,194,194,1); top: 0; left: 0; } @-webkit-keyframes ani-eye-right-0 { 0% { -webkit-transform: translate3d(52px, -99px, 0px) scale3d(1.09, 1.09, 1); z-index: 5; ;border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } 100% { -webkit-transform: translate3d(95px, 189px, 0px) scale3d(1.09, 1.09, 1); z-index: 5; ;border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } } @keyframes ani-eye-right-0 { 0% { transform: translate3d(52px, -99px, 0px) scale3d(1.09, 1.09, 1); z-index: 5; ;border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } 100% { transform: translate3d(95px, 189px, 0px) scale3d(1.09, 1.09, 1); z-index: 5; ;border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } } .run.time #eye-right { animation-name: ani-eye-right-0; -webkit-animation-name: ani-eye-right-0; animation-duration: 0.9099s; -webkit-animation-duration: 0.9099s; animation-delay: 4.1368s; -webkit-animation-delay: 4.1368s; animation-fill-mode: both; -webkit-animation-fill-mode: both; } .time #eye-right { transform: translate3d(95px, 189px, 0px) scale3d(1.09, 1.09, 1); -webkit-transform: translate3d(95px, 189px, 0px) scale3d(1.09, 1.09, 1); z-index: 5; ;border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } .restart.time #eye-right { transform: translate3d(52px, -99px, 0px) scale3d(1.09, 1.09, 1); -webkit-transform: translate3d(52px, -99px, 0px) scale3d(1.09, 1.09, 1); z-index: 5; ;border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } .restart #eye-right { animation-name: none !important; -webkit-animation-name: none !important; } #brow-left { transform: translate3d(63px, 357px, 0px); -webkit-transform: translate3d(63px, 357px, 0px); width: 66px; height: 66px; border-top: 1px solid rgba(1,14,13,1); border-right: 1px solid rgba(1,14,13,1); border-bottom: 1px solid rgba(1,14,13,1); border-left: 1px solid rgba(1,14,13,1); background-color: rgba(194,194,194,1); top: 0; left: 0; } @-webkit-keyframes ani-brow-left-0 { 0% { -webkit-transform: translate3d(-268.14285714285717px, 162.28571428571428px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(18.6deg) scale3d(0.96, 0.68, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); z-index: 6; ;background-color: rgba(54,54,54,1); } 100% { -webkit-transform: translate3d(93px, 161px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(18.6deg) scale3d(0.96, 0.68, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); z-index: 6; ;background-color: rgba(54,54,54,1); } } @keyframes ani-brow-left-0 { 0% { transform: translate3d(-268.14285714285717px, 162.28571428571428px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(18.6deg) scale3d(0.96, 0.68, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); z-index: 6; ;background-color: rgba(54,54,54,1); } 100% { transform: translate3d(93px, 161px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(18.6deg) scale3d(0.96, 0.68, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); z-index: 6; ;background-color: rgba(54,54,54,1); } } .run.time #brow-left { animation-name: ani-brow-left-0; -webkit-animation-name: ani-brow-left-0; animation-duration: 0.9263s; -webkit-animation-duration: 0.9263s; animation-delay: 5.0572s; -webkit-animation-delay: 5.0572s; animation-fill-mode: both; -webkit-animation-fill-mode: both; } .time #brow-left { transform: translate3d(93px, 161px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(18.6deg) scale3d(0.96, 0.68, 1); -webkit-transform: translate3d(93px, 161px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(18.6deg) scale3d(0.96, 0.68, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); z-index: 6; ;background-color: rgba(54,54,54,1); } .restart.time #brow-left { transform: translate3d(-268.14285714285717px, 162.28571428571428px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(18.6deg) scale3d(0.96, 0.68, 1); -webkit-transform: translate3d(-268.14285714285717px, 162.28571428571428px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(18.6deg) scale3d(0.96, 0.68, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); z-index: 6; ;background-color: rgba(54,54,54,1); } .restart #brow-left { animation-name: none !important; -webkit-animation-name: none !important; } #back_mouse { transform: translate3d(17px, 401px, 0px) scale3d(0.69, 0.69, 1); -webkit-transform: translate3d(17px, 401px, 0px) scale3d(0.69, 0.69, 1); width: 280px; height: 211px; border-top: 1px solid rgba(1,14,13,1); border-right: 1px solid rgba(1,14,13,1); border-bottom: 1px solid rgba(1,14,13,1); border-left: 1px solid rgba(1,14,13,1); border-top-left-radius: 800px; -webkit-border-top-left-radius: 800px; border-top-right-radius: 800px; -webkit-border-top-right-radius: 800px; border-bottom-right-radius: 800px; -webkit-border-bottom-right-radius: 800px; border-bottom-left-radius: 800px; -webkit-border-bottom-left-radius: 800px; background-color: rgba(194,194,194,1); top: 0; left: 0; } @-webkit-keyframes ani-back_mouse-0 { 0% { -webkit-transform: translate3d(18px, 456px, 0px) scale3d(0.69, 0.6348, 1); background-color: rgba(51,51,51,1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } 100% { -webkit-transform: translate3d(20px, 330px, 0px) scale3d(0.69, 0.6348, 1); background-color: rgba(51,51,51,1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } } @keyframes ani-back_mouse-0 { 0% { transform: translate3d(18px, 456px, 0px) scale3d(0.69, 0.6348, 1); background-color: rgba(51,51,51,1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } 100% { transform: translate3d(20px, 330px, 0px) scale3d(0.69, 0.6348, 1); background-color: rgba(51,51,51,1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } } .run.time #back_mouse { animation-name: ani-back_mouse-0; -webkit-animation-name: ani-back_mouse-0; animation-duration: 0.8105s; -webkit-animation-duration: 0.8105s; animation-delay: 6.0211s; -webkit-animation-delay: 6.0211s; animation-fill-mode: both; -webkit-animation-fill-mode: both; } .time #back_mouse { transform: translate3d(20px, 330px, 0px) scale3d(0.69, 0.6348, 1); -webkit-transform: translate3d(20px, 330px, 0px) scale3d(0.69, 0.6348, 1); background-color: rgba(51,51,51,1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } .restart.time #back_mouse { transform: translate3d(18px, 456px, 0px) scale3d(0.69, 0.6348, 1); -webkit-transform: translate3d(18px, 456px, 0px) scale3d(0.69, 0.6348, 1); background-color: rgba(51,51,51,1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); } .restart #back_mouse { animation-name: none !important; -webkit-animation-name: none !important; } #circle1 { transform: translate3d(213px, 497px, 0px); -webkit-transform: translate3d(213px, 497px, 0px); width: 61px; height: 61px; border-top: 1px solid rgba(1,14,13,1); border-right: 1px solid rgba(1,14,13,1); border-bottom: 1px solid rgba(1,14,13,1); border-left: 1px solid rgba(1,14,13,1); border-top-left-radius: 500px; -webkit-border-top-left-radius: 500px; border-top-right-radius: 500px; -webkit-border-top-right-radius: 500px; border-bottom-right-radius: 500px; -webkit-border-bottom-right-radius: 500px; border-bottom-left-radius: 500px; -webkit-border-bottom-left-radius: 500px; background-color: rgba(194,194,194,1); top: 0; left: 0; } @-webkit-keyframes ani-circle1-0 { 0% { -webkit-transform: translate3d(226px, 507px, 0px) scale3d(1.42, 1.42, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(255,255,255,1); } 100% { -webkit-transform: translate3d(233px, 390px, 0px) scale3d(1.42, 1.42, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(255,255,255,1); } } @keyframes ani-circle1-0 { 0% { transform: translate3d(226px, 507px, 0px) scale3d(1.42, 1.42, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(255,255,255,1); } 100% { transform: translate3d(233px, 390px, 0px) scale3d(1.42, 1.42, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(255,255,255,1); } } .run.time #circle1 { animation-name: ani-circle1-0; -webkit-animation-name: ani-circle1-0; animation-duration: 1.0174s; -webkit-animation-duration: 1.0174s; animation-delay: 6.8316s; -webkit-animation-delay: 6.8316s; animation-fill-mode: both; -webkit-animation-fill-mode: both; } .time #circle1 { transform: translate3d(233px, 390px, 0px) scale3d(1.42, 1.42, 1); -webkit-transform: translate3d(233px, 390px, 0px) scale3d(1.42, 1.42, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(255,255,255,1); } .restart.time #circle1 { transform: translate3d(226px, 507px, 0px) scale3d(1.42, 1.42, 1); -webkit-transform: translate3d(226px, 507px, 0px) scale3d(1.42, 1.42, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(255,255,255,1); } .restart #circle1 { animation-name: none !important; -webkit-animation-name: none !important; } #circle2 { transform: translate3d(169px, 532px, 0px); -webkit-transform: translate3d(169px, 532px, 0px); width: 66px; height: 66px; border-top: 1px solid rgba(1,14,13,1); border-right: 1px solid rgba(1,14,13,1); border-bottom: 1px solid rgba(1,14,13,1); border-left: 1px solid rgba(1,14,13,1); border-top-left-radius: 500px; -webkit-border-top-left-radius: 500px; border-top-right-radius: 500px; -webkit-border-top-right-radius: 500px; border-bottom-right-radius: 500px; -webkit-border-bottom-right-radius: 500px; border-bottom-left-radius: 500px; -webkit-border-bottom-left-radius: 500px; background-color: rgba(194,194,194,1); top: 0; left: 0; } @-webkit-keyframes ani-circle2-0 { 0% { -webkit-transform: translate3d(187px, 664px, 0px) scale3d(1.86, 1.86, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(255,255,255,1); } 100% { -webkit-transform: translate3d(187px, 441px, 0px) scale3d(1.86, 1.86, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(255,255,255,1); } } @keyframes ani-circle2-0 { 0% { transform: translate3d(187px, 664px, 0px) scale3d(1.86, 1.86, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(255,255,255,1); } 100% { transform: translate3d(187px, 441px, 0px) scale3d(1.86, 1.86, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(255,255,255,1); } } .run.time #circle2 { animation-name: ani-circle2-0; -webkit-animation-name: ani-circle2-0; animation-duration: 1.0174s; -webkit-animation-duration: 1.0174s; animation-delay: 6.8316s; -webkit-animation-delay: 6.8316s; animation-fill-mode: both; -webkit-animation-fill-mode: both; } .time #circle2 { transform: translate3d(187px, 441px, 0px) scale3d(1.86, 1.86, 1); -webkit-transform: translate3d(187px, 441px, 0px) scale3d(1.86, 1.86, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(255,255,255,1); } .restart.time #circle2 { transform: translate3d(187px, 664px, 0px) scale3d(1.86, 1.86, 1); -webkit-transform: translate3d(187px, 664px, 0px) scale3d(1.86, 1.86, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(255,255,255,1); } .restart #circle2 { animation-name: none !important; -webkit-animation-name: none !important; } #circle3 { transform: translate3d(31px, 477px, 0px) scale3d(0.71, 0.71, 1); -webkit-transform: translate3d(31px, 477px, 0px) scale3d(0.71, 0.71, 1); width: 100px; height: 100px; border-top: 0px solid rgba(1,14,13,1); border-right: 0px solid rgba(1,14,13,1); border-bottom: 0px solid rgba(1,14,13,1); border-left: 0px solid rgba(1,14,13,1); border-top-left-radius: 500px; -webkit-border-top-left-radius: 500px; border-top-right-radius: 500px; -webkit-border-top-right-radius: 500px; border-bottom-right-radius: 500px; -webkit-border-bottom-right-radius: 500px; border-bottom-left-radius: 500px; -webkit-border-bottom-left-radius: 500px; background-color: rgba(255,255,255,1); top: 0; left: 0; } @-webkit-keyframes ani-circle3-0 { 0% { -webkit-transform: translate3d(13px, 486px, 0px) scale3d(0.8306999999999999, 0.8306999999999999, 1); } 100% { -webkit-transform: translate3d(8px, 372px, 0px) scale3d(0.8306999999999999, 0.8306999999999999, 1); } } @keyframes ani-circle3-0 { 0% { transform: translate3d(13px, 486px, 0px) scale3d(0.8306999999999999, 0.8306999999999999, 1); } 100% { transform: translate3d(8px, 372px, 0px) scale3d(0.8306999999999999, 0.8306999999999999, 1); } } .run.time #circle3 { animation-name: ani-circle3-0; -webkit-animation-name: ani-circle3-0; animation-duration: 1.0174s; -webkit-animation-duration: 1.0174s; animation-delay: 6.8316s; -webkit-animation-delay: 6.8316s; animation-fill-mode: both; -webkit-animation-fill-mode: both; } .time #circle3 { transform: translate3d(8px, 372px, 0px) scale3d(0.8306999999999999, 0.8306999999999999, 1); -webkit-transform: translate3d(8px, 372px, 0px) scale3d(0.8306999999999999, 0.8306999999999999, 1); } .restart.time #circle3 { transform: translate3d(13px, 486px, 0px) scale3d(0.8306999999999999, 0.8306999999999999, 1); -webkit-transform: translate3d(13px, 486px, 0px) scale3d(0.8306999999999999, 0.8306999999999999, 1); } .restart #circle3 { animation-name: none !important; -webkit-animation-name: none !important; } #circle4 { transform: translate3d(76px, 537px, 0px); -webkit-transform: translate3d(76px, 537px, 0px); width: 72px; height: 72px; border-top: 0px solid rgba(1,14,13,1); border-right: 0px solid rgba(1,14,13,1); border-bottom: 0px solid rgba(1,14,13,1); border-left: 0px solid rgba(1,14,13,1); border-top-left-radius: 500px; -webkit-border-top-left-radius: 500px; border-top-right-radius: 500px; -webkit-border-top-right-radius: 500px; border-bottom-right-radius: 500px; -webkit-border-bottom-right-radius: 500px; border-bottom-left-radius: 500px; -webkit-border-bottom-left-radius: 500px; background-color: rgba(194,194,194,1); top: 0; left: 0; } @-webkit-keyframes ani-circle4-0 { 0% { -webkit-transform: translate3d(63px, 644px, 0px) scale3d(1.68, 1.68, 1); background-color: rgba(255,255,255,1); } 100% { -webkit-transform: translate3d(64px, 437px, 0px) scale3d(1.68, 1.68, 1); background-color: rgba(255,255,255,1); } } @keyframes ani-circle4-0 { 0% { transform: translate3d(63px, 644px, 0px) scale3d(1.68, 1.68, 1); background-color: rgba(255,255,255,1); } 100% { transform: translate3d(64px, 437px, 0px) scale3d(1.68, 1.68, 1); background-color: rgba(255,255,255,1); } } .run.time #circle4 { animation-name: ani-circle4-0; -webkit-animation-name: ani-circle4-0; animation-duration: 1.0174s; -webkit-animation-duration: 1.0174s; animation-delay: 6.8316s; -webkit-animation-delay: 6.8316s; animation-fill-mode: both; -webkit-animation-fill-mode: both; } .time #circle4 { transform: translate3d(64px, 437px, 0px) scale3d(1.68, 1.68, 1); -webkit-transform: translate3d(64px, 437px, 0px) scale3d(1.68, 1.68, 1); background-color: rgba(255,255,255,1); } .restart.time #circle4 { transform: translate3d(63px, 644px, 0px) scale3d(1.68, 1.68, 1); -webkit-transform: translate3d(63px, 644px, 0px) scale3d(1.68, 1.68, 1); background-color: rgba(255,255,255,1); } .restart #circle4 { animation-name: none !important; -webkit-animation-name: none !important; } #ear { transform: translate3d(290px, 610px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(46.1deg) scale3d(1.49, 1.24, 1); -webkit-transform: translate3d(290px, 610px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(46.1deg) scale3d(1.49, 1.24, 1); width: 47px; height: 47px; border-top: 1px solid rgba(1,14,13,1); border-right: 1px solid rgba(1,14,13,1); border-bottom: 1px solid rgba(1,14,13,1); border-left: 1px solid rgba(1,14,13,1); background-color: rgba(194,194,194,1); top: 0; left: 0; } @-webkit-keyframes ani-ear-0 { 0% { -webkit-transform: translate3d(139px, 662px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(90.1deg) scale3d(0.6854, 0.62, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(51,51,51,1); } 100% { -webkit-transform: translate3d(138px, 345px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(90.1deg) scale3d(0.6854, 0.62, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(51,51,51,1); } } @keyframes ani-ear-0 { 0% { transform: translate3d(139px, 662px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(90.1deg) scale3d(0.6854, 0.62, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(51,51,51,1); } 100% { transform: translate3d(138px, 345px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(90.1deg) scale3d(0.6854, 0.62, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(51,51,51,1); } } .run.time #ear { animation-name: ani-ear-0; -webkit-animation-name: ani-ear-0; animation-duration: 0.5368s; -webkit-animation-duration: 0.5368s; animation-delay: 7.849s; -webkit-animation-delay: 7.849s; animation-fill-mode: both; -webkit-animation-fill-mode: both; } .time #ear { transform: translate3d(138px, 345px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(90.1deg) scale3d(0.6854, 0.62, 1); -webkit-transform: translate3d(138px, 345px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(90.1deg) scale3d(0.6854, 0.62, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(51,51,51,1); } .restart.time #ear { transform: translate3d(139px, 662px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(90.1deg) scale3d(0.6854, 0.62, 1); -webkit-transform: translate3d(139px, 662px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(90.1deg) scale3d(0.6854, 0.62, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(51,51,51,1); } .restart #ear { animation-name: none !important; -webkit-animation-name: none !important; } #ear-square { transform: translate3d(314px, 299px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(37.7deg); -webkit-transform: translate3d(314px, 299px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(37.7deg); width: 26px; height: 31px; border-top: 1px solid rgba(1,14,13,1); border-right: 1px solid rgba(1,14,13,1); border-bottom: 1px solid rgba(1,14,13,1); border-left: 1px solid rgba(1,14,13,1); background-color: rgba(194,194,194,1); top: 0; left: 0; } @-webkit-keyframes ani-ear-square-0 { 0% { -webkit-transform: translate3d(148px, 487px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(44.800000000000004deg) scale3d(1.19, 1.02, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(255,255,255,1); } 100% { -webkit-transform: translate3d(148px, 331px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(44.800000000000004deg) scale3d(1.19, 1.02, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(255,255,255,1); } } @keyframes ani-ear-square-0 { 0% { transform: translate3d(148px, 487px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(44.800000000000004deg) scale3d(1.19, 1.02, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(255,255,255,1); } 100% { transform: translate3d(148px, 331px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(44.800000000000004deg) scale3d(1.19, 1.02, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(255,255,255,1); } } .run.time #ear-square { animation-name: ani-ear-square-0; -webkit-animation-name: ani-ear-square-0; animation-duration: 0.5894s; -webkit-animation-duration: 0.5894s; animation-delay: 8.4069s; -webkit-animation-delay: 8.4069s; animation-fill-mode: both; -webkit-animation-fill-mode: both; } .time #ear-square { transform: translate3d(148px, 331px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(44.800000000000004deg) scale3d(1.19, 1.02, 1); -webkit-transform: translate3d(148px, 331px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(44.800000000000004deg) scale3d(1.19, 1.02, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(255,255,255,1); } .restart.time #ear-square { transform: translate3d(148px, 487px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(44.800000000000004deg) scale3d(1.19, 1.02, 1); -webkit-transform: translate3d(148px, 487px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(44.800000000000004deg) scale3d(1.19, 1.02, 1); border-top: 0px solid rgba(127,127,127,1); border-right: 0px solid rgba(127,127,127,1); border-bottom: 0px solid rgba(127,127,127,1); border-left: 0px solid rgba(127,127,127,1); background-color: rgba(255,255,255,1); } .restart #ear-square { animation-name: none !important; -webkit-animation-name: none !important; }"}],"posts":[{"title":"SpringCloud-01","slug":"SpringCloud-01","date":"2021-07-01T05:44:08.000Z","updated":"2021-07-01T07:08:44.671Z","comments":true,"path":"archives/d3c36fc.html","link":"","permalink":"https://nzgong.com/archives/d3c36fc.html","excerpt":"","text":"","categories":[{"name":"SpringCloud","slug":"SpringCloud","permalink":"https://nzgong.com/categories/SpringCloud/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://nzgong.com/tags/Java/"},{"name":"框架","slug":"框架","permalink":"https://nzgong.com/tags/%E6%A1%86%E6%9E%B6/"}]},{"title":"Java面试-Java基础","slug":"Java面试-Java基础","date":"2021-06-30T10:07:16.000Z","updated":"2021-07-01T08:37:14.639Z","comments":true,"path":"archives/3301a9f.html","link":"","permalink":"https://nzgong.com/archives/3301a9f.html","excerpt":"","text":"基础篇Java语言有哪些特点1、简单易学 2、 面向对象 3、与平台无关性 4、可靠安全 5、支持多线程 面向对象和面向过程的区别面向过程：分析解决问题的步骤，把这些步骤用函数一步步实现，在使用时一一调用，性能较高。 面向对象：把构成问题的事务分解成对象，描述事务在解决问题的过程中发生的行为。面向对象有封装、继承、多态的特性，易维护、易复用、易扩展。可以设计出低耦合的系统，性能比面向过程低。 八种基本数据类型的大小、以及他们的封装类 基本类型 大小（字节） 默认值 封装类 byte 1 (byte)0 Byte short 2 (short)0 Short int 4 0 Integer long 8 0L Long float 4 0.0f Float double 8 0.0d Double boolean - false Boolean char 2 \\u0000(null) Character 注： 1、int是基本数据类型，Integer是int的封装类，是引用类型。int默认值是0，而Integer默认值是null，所以Integer能区分出0和null的情况。一旦Java看到null，就知道这个引用还没有指向某个对象，在任何引用使用前，必须为其指定一个对象，否则会报错。 2、基本数据类型在声明时系统会自动给他分配空间，而引用类型声明时只是分配了引用控件，必须通过实例化开辟数据空间之后才可以赋值。数组对象也是一个引用对象，将一个数组赋值给另一个数组时只是复制了一个引用，所以通过某一个数组所做的修改在另一个数组中也看得见。 虽然定义了boolean这种数据类型，但是只对它提供了非常有限的支持。在Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达式所操作的boolean值，在编译之后都使用Java虚拟机中的int数据类型来代替，而boolean数组将会被编码成Java虚拟机的byte数组，每个元素boolean元素占8位。这样我们可以得出boolean类型占了单独使用是4个字节，在数组中又是1个字节。使用int的原因是，对于当下32位的处理器（CPU）来说，一次处理数据是32位（这里不是指的是32/64系统，而是指CPU硬件层面），具有高效存取的特点。 标识符的命名规则标识符的含义： 是指在程序中，我们自己定义的内容，譬如，类的名字，方法名称以及变量名称等等，都是标识符。 命名规则：（硬性要求） 标识符可以包含英文字母，0-9的数字，$以及_ 标识符不能以数字开头 标识符不是关键字 命名规范：（非硬性要求） 类名规范：首字母大写，后面每个单词首字母大写（大驼模式） 变量名规范：首字母小写，后面每个单词首字母大写（小驼模式） 方法名规范：同变量名 instanceof关键字的作用instanceof严格来说是Java中的一个双目运算符， 用来测试一个对象是否为一个类的实例，用法为： boolean result = obj instanceof Class 其中obj为一个对象，Class表示一个类或者一个接口，当obj为Class的对象，或者是其直接或间接子类，或者是其接口的实现类，结果result都返回true，否则返回false。 注意：编译器会检查obj是否能转换成右边的Class类型，如果不能转换啧直接报错，如果不能确定类型，则通过编译具体看运行时定。 int i = 0; System.out.println(i instanceof Integer);//编译不通过 i必须是引用类型，不能是基本类型 System.out.println(i instanceof Object);//编译不通过 Integer integer = new Integer(1); System.out.println(integer instanceof Integer);//true //false ,在 JavaSE规范 中对 instanceof 运算符的规定就是：如果 obj 为 null，那么将返回false。 System.out.println(null instanceof Object); Java自动装箱与拆箱装箱就是自动将基本数据类型装换为包装器类型（int –&gt; Integer） 调用方法：Integer的valueOf（int）方法 拆箱就是自动将包装器类型转换为基本数据类型（Integer –&gt; int） 调用方法：Integer的intValue方法 在Java SE5之前，如果要生成一个数值为10 的Integer对象，必须这样进行： Integer i = new Integer(10); 而现在从Java SE5开始就提供了自动装箱的特性，如果要生成一个数值为10的Integer对象，只需要这样就可以了： Integer i = 10; 面试题1：以下代码会输出什么？ public class Main &#123; public static void main(String[] args) &#123; Integer i1 = 100; Integer i2 = 100; Integer i3 = 200; Integer i4 = 200; System.out.println(i1==i2); System.out.println(i3==i4); &#125; &#125; 运行结果： true false 为什么会出现这样的结果呢？输出结果表明i1和i2指向的是同一个对象，而i3和i4指向的是不同的对象。此时只需看看源码便知究竟，下面这段代码是Integer的valueOf方法的具体实现： public static Integer valueOf(int i) &#123; if(i >= -128 &amp;&amp; i &lt;= IntegerCache.high) return IntegerCache.cache[i + 128]; else return new Integer(i); &#125; 其中IntegerCache类的实现类为： private static class IntegerCache &#123; static final int high; static final Integer cache[]; static &#123; final int low = -128; // high value may be configured by property int h = 127; if (integerCacheHighPropValue != null) &#123; // Use Long.decode here to avoid invoking methods that // require Integer's autoboxing cache to be initialized int i=Long.decode(integerCacheHighPropValue).intValue(); i = Math.max(i, 127); // Maximum array size is Integer.MAX_VALUE h = Math.min(i, Integer.MAX_VALUE - -low); &#125; high = h; cache = new Integer[(high - low) + 1]; int j = low; for(int k = 0; k &lt; cache.length; k++) cache[k] = new Integer(j++); &#125; private IntegerCache() &#123;&#125; &#125; 从这两段代码可以看出，在通过val方法创建Integer对象的时候，如果数值在[-128,127]之间，便返回指向InterCache.cache中已经存在的对象的引用；否则创建一个新的Internet对象。 上面的代码中i1和i2的数值为100，因此会直接从cache中取已经存在的对象，所以i1和i2指向的是同一 个对象，而i3和i4则是分别指向不同的对象。 面试题2：以下代码输出什么？ public class Main &#123; public static void main(String[] args) &#123; Double i1 = 100.0; Double i2 = 100.0; Double i3 = 200.0; Double i4 = 200.0; System.out.println(i1==i2); System.out.println(i3==i4); &#125; &#125; 运行结果： false false 原因： 在某个范围内的整型数值的个数是有限的，而浮点数却不是。 重载和重写的区别从字面上看，重写就是重新写一遍的意思，其实就是在子类中把父类本身有的方法重新写一遍。子类继承了父类原有的方法，但有时子类并不想原封不动的继承父类中的某个方法，所以在方法名，参数列表，返回类型（除了子类中方法的返回值是父类中方法返回值的子类时）都相同的情况下，对方法体进行修改或者重写，这就是重写，但要注意子类函数的访问修饰权限不能少于父类的。 public class Father &#123; public static void main(String[] args) &#123; // TODO Auto-generated method stub Son s = new Son(); s.sayHello(); &#125; public void sayHello() &#123; System.out.println(\"Hello\"); &#125; &#125; class Son extends Father&#123; @Override public void sayHello() &#123; // TODO Auto-generated method stub System.out.println(\"hello by \"); &#125; &#125; 重写 总结： 发生在父类与子类之间 方法名，参数列表，返回类型（除了子类中方法的返回类型是父类中返回类型的子类）必须相同 访问修饰符的限制一定要大于被重写方法的访问修饰符（public&gt;protected&gt;default&gt;private） 重写方法一定不能抛出新的检查异常或者比被重写方法申明更加宽泛的检查型异常 重载（Overload） 在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同甚至是参数顺序不同）则视为重载。同时，重载对返回类型没有要求，可以相同也可以不同，但不能通过返回类型是否相同来判断重载。 public class Father &#123; public static void main(String[] args) &#123; // TODO Auto-generated method stub Father s = new Father(); s.sayHello(); s.sayHello(\"wintershii\"); &#125; public void sayHello() &#123; System.out.println(\"Hello\"); &#125; public void sayHello(String name) &#123; System.out.println(\"Hello\" + \" \" + name); &#125; &#125; 重载 总结： 重载Overload是一个类中多态性的一种表现 重载要求同名方法的参数列表不同(参数类型，参数个数甚至是参数顺序) 重载的时候，返回值类型可以相同也可以不相同。无法以返回型别作为重载函数的区分标准 equals与==的区别==： == 比较的是变量(栈)内存中存放的对象的(堆)内存地址，用来判断两个对象的地址是否相同，即是否是指相同一个对象。比较的是真正意义上的指针操作 比较的是操作符两端的操作数是否是同一个对象。 两边的操作数必须是同一类型的（可以是父子类之间）才能编译通过。 比较的是地址，如果是具体的阿拉伯数字的比较，值相等则为true，如：int a=10 与 long b=10L 与 double c=10.0都是相同的（为true），因为他们都指向地址为10的堆。 equals: equals用来比较的是两个对象的内容是否相等，由于所有的类都是继承自java.lang.Object类的，所以 适用于所有对象，如果没有对该方法进行覆盖的话，调用的仍然是Object类中的方法，而Object中的equals方法返回的却是==的判断。 总结： 所有比较是否相等时，都是用equals并且在对常量相比较时，把常量写在前面，因为使用object的equals object可能为null则空指针。 在阿里的代码规范中只使用equals，阿里插件默认会识别，并可以快速修改，推荐安装阿里插件来排查老代码使用“==”，替换成equals。 Hashcode的作用java的集合有两类，一类是List，还有一类是Set。前者有序可重复，后者无序不重复。当我们在set中 插入的时候怎么判断是否已经存在该元素呢，可以通过equals方法。但是如果元素太多，用这样的方法 就会比较满。 于是有人发明了哈希算法来提高集合中查找元素的效率。 这种方式将集合分成若干个存储区域，每个对象可以计算出一个哈希码，可以将哈希码分组，每组分别对应某个存储区域，根据一个对象的哈希码就可以确定该对象应该存储的那个区域。 hashCode方法可以这样理解：它返回的就是根据对象的内存地址换算出的一个值。这样一来，当集合 要添加新的元素时，先调用这个元素的hashCode方法，就一下子能定位到它应该放置的物理位置上。 如果这个位置上没有元素，它就可以直接存储在这个位置上，不用再进行任何比较了。如果这个位置上已经有元素了，就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地址。这样一来实际调用equals方法的次数就大大降低了，几乎只需要一两次。 String、String StringBuﬀer 和 StringBuilder 的区别是什么?String是只读字符串，它并不是基本数据类型，而是一个对象。从底层源码来看是一个ﬁnal类型的字符数组，所引用的字符串不能被改变，一经定义，无法再增删改。每次对String的操作都会生成新的String对象。 private final char value[]; 每次+操作 ：隐式在堆上new了一个跟原字符串相同的StringBuilder对象，再调用append方法 拼接+后面的字符 StringBuﬀer和StringBuilder他们两都继承了AbstractStringBuilder抽象类，从AbstractStringBuilder抽象类中我们可以看到 /** * The value is used for character storage. */ char[] value; 他们的底层都是可变的字符数组，所以在进行频繁的字符串操作时，建议使用StringBuﬀer和StringBuilder来进行操作。另外StringBuﬀer对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder并没有对方法进行加同步锁，所以是非线程安全的。 ArrayList和linkedList的区别Array（数组）是基于索引(index)的数据结构，它使用索引在数组中搜索和读取数据是很快的。 Array获取数据的时间复杂度是O(1)，但是要删除数据却是开销很大，因为这需要重排数组中的所有数据。(因为删除数据以后, 需要把后面所有的数据前移) 缺点：数组初始化必须指定初始化的长度, 否则报错 例如： int[] a = new int[4];//推荐使用int[] 这种方式初始化 int c[] = &#123;23,43,56,78&#125;;//长度：4，索引范围：[0,3] List是一个有序的集合，可以包含重复的元素，提供了按索引访问的方式，它继承Collection。 List有两个重要的实现类：ArrayList和LinkedList ArrayList: 可以看作是能够自动增长容量的数组 ArrayList的toArray方法返回一个数组 ArrayList的asList方法返回一个列表 ArrayList底层的实现是Array, 数组扩容实现 LinkList是一个双链表，在添加和删除元素时具有比ArrayList更好的性能。但在get与set方面弱于ArrayList。当然，这些对比都是指数据量很大或者操作很频繁。 HashMap和HashTable的区别1、两者父类不同 HashMap是继承自AbstractMap类，而Hashtable是继承自Dictionary类。不过它们都实现了同时实现了map、Cloneable（可复制）、Serializable（可序列化）这三个接口。 2、对外提供的接口不同 Hashtable比HashMap多提供了elments()和contains() 两个方法。 elments() 方法继承自Hashtable的父类Dictionnary。elements() 方法用于返回此Hashtable中的value的枚举。 contains()方法判断该Hashtable是否包含传入的value。它的作用与containsValue()一致。事实上，contansValue() 就只是调用了一下contains() 方法。 3、对null的支持不同 Hashtable: key和value都不能为null。 HashMap: key可以为null，但是这样的key只能有一个，因为必须保证key的唯一性。可以有多个key值对应的value为null。 4、安全性不同 HashMap是线程不安全的，在多线程并发的环境下，可能会产生死锁等问题，因此需要开发人员自己处理多线程的安全问题。 Hashtable是线程安全的，它的每个方法上都有synchronized关键字，因此可直接用于多线程中。 虽然HashMap是线程不安全的，但是它的效率远远高于Hashtable，这样设计是合理的，因为大部分的使用场景都是单线程。当需要多线程操作的时候可以使用线程安全的ConcurrentHashMap。 ConcurrentHashMap虽然也是线程安全的，但是它的效率比Hashtable要高好多倍。因为ConcurrentHashMap使用了分段锁，并不对整个数据进行锁定。 5、初始容量大小和每次扩充容量大小不同 6、计算hash值的方法不同 Collection包结构，与Collections的区别Collection是集合类的上级接口，子接口有 Set、List、LinkedList、ArrayList、Vector、Stack、Set。 Collections是集合类的一个帮助类，它包含有各种有关集合操作的静态多态方法，用于实现对各种集合的搜索、排序、线程安全化等操作。此类不能实例化，就像一个工具类，服务于Java的Collection框架。 Java的四种引用，强弱软虚 强引用 强引用是平常中使用最多的引用，强引用在程序内存不足（OOM）的时候也不会被回收，使用方 式： String str = new String(\"str\"); 软引用 软引用在程序内存不足时，会被回收，使用方式： // 注意：wrf这个引用也是强引用，它是指向SoftReference这个对象的， // 这里的软引用指的是指向new String(\"str\")的引用，也就是SoftReference类中T SoftReference&lt;String> wrf = new SoftReference&lt;String>(new String(\"str\")); 可用场景： 创建缓存的时候，创建的对象放进缓存中，当内存不足时，JVM就会回收早先创建的对象。 弱引用 弱引用就是只要JVM垃圾回收器发现了它，就会将之回收，使用方式： WeakReference&lt;String> wrf = new WeakReference&lt;String>(str); 可用场景： Java源码中的java.util.WeakHashMap中的key就是使用弱引用，我的理解就是， 一旦我不需要某个引用，JVM会自动帮我处理它，这样我就不需要做其它操作。 虚引用 虚引用的回收机制跟弱引用差不多，但是它被回收之前，会被放入ReferenceQueue中。注意哦，其它引用是被JVM回收后才被传入ReferenceQueue中的。由于这个机制，所以虚引用大多被用于引用销毁前的处理工作。还有就是，虚引用创建的时候，必须带有ReferenceQueue，使用例子： PhantomReference&lt;String> prf = new PhantomReference&lt;String>(new String(\"str\"), new ReferenceQueue&lt;>()); 可用场景：对象销毁前的一些操作，比如说资源释放等。Object.finalize() 虽然也可以做这类动作，但是这个方式即不安全又低效 上诉所说的几类引用，都是指对象本身的引用，而不是指Reference的四个子类的引用(SoftReference等) 泛型常用特点泛型是Java SE 1.5之后的特性，《Java核心技术》中对泛型的定义是： “泛型” 意味着编写的代码可以被不同类型的对象所重用。 “泛型”，顾名思义，“泛指的类型”。我们提供了泛指的概念，但具体执行的时候却可以有具体的规则来约束，比如我们用的非常多的ArrayList就是个泛型类，ArrayList作为集合可以存放各种元素，如Integer、String、自定义的各种类型等，但在我们使用的时候通过具体的规则来约束，如我们可以约束集合中只存放Integer类型的元素，如 List&lt;Integer> iniData = new ArrayList&lt;> 使用泛型的好处？ 以集合来举例，使用泛型的好处是我们不必因为添加元素类型的不同而定义不同类型的集合，如整型集合类，浮点型集合类，字符串集合类，我们可以定义一个集合来存放整型、浮点型，字符串型数据，而这并不是最重要的，因为我们只要把底层存储设置了Object即可，添加的数据全部都可向上转型为Object。更重要的是我们可以通过规则按照自己的想法控制存储的数据类型。 Java创建对象有几种方式？java中提供了以下四种创建对象的方式: new创建新对象 通过反射机制 采用clone机制 通过序列化机制 有没有可能两个不相等的对象有相同的hashcode有可能，在产生hash冲突时，两个不相等的对象就会有相同的 hashcode 值。当hash冲突产生时，一般有以下几种方式来处理： 拉链法：每个哈希表节点都有一个next指针，多个哈希表节点可以用next指针构成一个单向链表，被分配到同一个索引上的多个节点可以用这个单向链表进行存储。 开放定址法：一旦发生了冲突，就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将记录存入。 再哈希：又叫双哈希法，有多个不同的Hash函数，当发生冲突时，使用第二个，第三个……等哈希函数计算地址，直到无冲突。 深拷贝和浅拷贝的区别是什么? 浅拷贝：被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。换言之，浅拷贝仅仅复制所考虑的对象，而不复制它所引用的对象。 深拷贝：被复制对象的所有变量都含有与原来的对象相同的值，而那些引用其他对象的变量将指向被复制到的新对象，而不再是原有的那些被引用的对象.换言之，深拷贝把要复制的对象所引用的对象都复制了一遍。 ﬁnal有哪些用法? 被ﬁnal修饰的类不可以被继承 被ﬁnal修饰的方法不可以被重写 被ﬁnal修饰的变量不可以被改变.如果修饰引用,那么表示引用不可变,引用指向的内容可变. 被ﬁnal修饰的方法,JVM会尝试将其内联,以提高运行效率 被ﬁnal修饰的常量,在编译阶段会存入常量池中 static都有哪些用法?所有的人都知道static关键字这两个基本的用法：静态变量和静态方法。也就是被static所修饰的变量/方法都属于类的静态资源，类实例所共享。 除了静态变量和静态方法之外，static也用于静态块，多用于初始化操作： public calss PreCache&#123; static&#123; //执行相关操作 &#125; &#125; 此外static也多用于修饰内部类，此时称之为静态内部类。 最后一种用法就是静态导包，即import static。import static是在JDK 1.5之后引入的新特性，可以用来指定导入某个类中的静态资源，并且不需要使用类名，可以直接使用资源名，比如： import static java.lang.Math.*; public class Test&#123; public static void main(String[] args)&#123; //System.out.println(Math.sin(20));传统做法 System.out.println(sin(20)); &#125; &#125; 3 * 0.1 == 0.3返回值是什么false，因为有些浮点数不能完全精确的表示出来。 a=a+b与a+=b有什么区别吗?+=操作符会进行隐式自动类型转换，此处a+=b隐式的将加操作的结果类型强制转换为持有结果的类型，而a=a+b则不会自动进行类型转换，如： byte a = 127; byte b = 127; b = a + b; // 报编译错误:cannot convert from int to byte b += a; 以下代码是否有错，有的话怎么改? short s1= 1; s1 = s1 + 1; 有错误，short类型在进行运算时会自动提升为int类型，也就是说 s1+1 的运算结果是int类型，而s1是short 类型，此时编译器会报错. 正确写法： short s1= 1; s1 += 1; +=操作符会对右边的表达式结果强转匹配左边的数据类型，所以没错。 try catch ﬁnally，try里有return，ﬁnally还执行么？执行，并且ﬁnally的执行早于try里面的return。 结论： 不管有没有出现异常，ﬁnally块中代码都会执行； 当try和catch中有return时，ﬁnally仍然会执行； ﬁnally是在return后面的表达式运算后执行的（此时并没有返回运算后的值，而是先把要返回的值保存起来，不管ﬁnally中的代码怎么样，返回的值都不会改变，仍然是之前保存的值），所以函数返回值是在ﬁnally执行前确定的； ﬁnally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值。 Excption与Error包结构Java可抛出(Throwable)的结构分为三种类型：被检查的异常(CheckedException)，运行时异常(RuntimeException)，错误(Error)。 1、运行时异常 定义：RuntimeException及其子类都被称为运行时异常。 特点：Java编译器不会检查它。也就是说，当程序中可能出现这类异常时，倘若既”没有通过throws声明抛出它”，也”没有用try-catch语句捕获它”，还是会编译通过。例如，除数为零时产生的ArithmeticException异常，数组越界时产生的IndexOutOfBoundsException异常，fail-fast机制产生的ConcurrentModiﬁcationException异常（java.util包下面的所有的集合类都是快速失败的，“快速失 败”也就是fail-fast，它是Java集合的一种错误检测机制。当多个线程对集合进行结构上的改变的操作时，有可能会产生fail-fast机制。记住是有可能，而不是一定。例如：假设存在两个线程（线程1、线程2），线程1通过Iterator在遍历集合A中的元素，在某个时候线程2修改了集合A的结构（是结构上面的修改，而不是简单的修改集合元素的内容），那么这个时候程序就会抛出ConcurrentModiﬁcationException 异常，从而产生fail-fast机制，这个错叫并发修改异常。Fail-safe，java.util.concurrent包下面的所有的类都是安全失败的，在遍历过程中，如果已经遍历的数组上的内容 变化了，迭代器不会抛出ConcurrentModiﬁcationException异常。如果未遍历的数组上的内容发生了变化，则有可能反映到迭代过程中。这就是ConcurrentHashMap迭代器弱一致的表现。ConcurrentHashMap的弱一致性主要是为了提升效率，是一致性与效率之间的一种权衡。要成为强一致性，就得到处使用锁，甚至是全局锁，这就与Hashtable和同步的HashMap一样了。）等，都属于运行时异常。 常见的五种运行时异常： ClassCastException（ 类转换异常 ） IndexOutOfBoundsException（数组越界） NullPointerException（空指针异常） ArrayStoreException（数据存储异常，操作数组是类型不一致） BuﬀerOverﬂowException 2、被检查异常 定义：Exception类本身，以及Exception的子类中除了”运行时异常”之外的其它子类都属于被检查异常。 特点 ：Java编译器会检查它。此类异常，要么通过throws进行声明抛出，要么通过try-catch进行捕获处理，否则不能通过编译。例如，CloneNotSupportedException就属于被检查异常。当通过clone()接口去克隆一个对象，而该对象对应的类没有实现Cloneable接口，就会抛出CloneNotSupportedException异常。被检查异常通常都是可以恢复的。 如： IOException FileNotFoundException SQLException 被检查的异常适用于那些不是因程序引起的错误情况，比如：读取文件时文件不存在引发的FileNotFoundException。然而，不被检查的异常通常都是由于糟糕的编程引起的，比如：在对象引用时没有确保对象非空而引起的NullPointerException。 3、错误 定义： Error类及其子类。 特点：和运行时异常一样，编译器也不会对错误进行检查。 当资源不足、约束失败、或是其它程序无法继续运行的条件发生时，就产生错误。程序本身无法修复这些错误的。例如，VirtualMachineError就属于错误。出现这种错误会导致程序终止运行。OutOfMemoryError、ThreadDeath。 Java虚拟机规范规定JVM的内存分为了好几块，比如堆，栈，程序计数器，方法区等 OOM你遇到过哪些情况，SOF你遇到过哪些情况OOM: 1、OutOfMemoryError异常 除了程序计数器外，虚拟机内存的其他几个运行时区域都有发生OutOfMemoryError(OOM)异常的可能。 Java Heap 溢出： 一般的异常信息：java.lang.OutOfMemoryError:java heap spacess。 Java对用于存储对象实例，我们只要不断的创建对象，并且保证GC Roots到对象之间有可达路径来避免垃圾回收机制清除这些对象，就会在对象数量达到最大堆容量限制后产生内存溢出异常。 出现这种异常，一般手段是先通过内存映像分析工具(如Eclipse Memory Analyzer)对dump出来的堆转存快照进行分析，重点是确认内存中的对象是否是必要的，先分清是因为内存泄漏(Memory Leak)还是内存溢出(Memory Overﬂow)。 如果是内存泄漏，可进一步通过工具查看泄漏对象到GCRoots的引用链。于是就能找到泄漏对象是通过 怎样的路径与GC Roots相关联并导致垃圾收集器无法自动回收。 如果不存在泄漏，那就应该检查虚拟机的参数(-Xmx与-Xms)的设置是否适当。 2，虚拟机栈和本地方法栈溢出 如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverﬂowError异常。 如果虚拟机在扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常 这里需要注意当栈的大小越大可分配的线程数就越少。 3，运行时常量池溢出 异常信息：java.lang.OutOfMemoryError：PermGenspace 如果要向运行时常量池中添加内容，最简单的做法就是使用String.intern()这个Native方法。该方法的 作用是：如果池中已经包含一个等于此String的字符串，则返回代表池中这个字符串的String对象；否 则，将此String对象包含的字符串添加到常量池中，并且返回此String对象的引用。由于常量池分配在 方法区内，我们可以通过-XX：PermSize和-XX：MaxPermSize限制方法区的大小，从而间接限制其中常量 池的容量。 4，方法区溢出 方法区用于存放Class的相关信息，如类名、访问修饰符、常量池、字段描述、方法描述等。也有可能 是方法区中保存的class对象没有被及时回收掉或者class信息占用的内存超过了我们配置。 异常信息：java.lang.OutOfMemoryError：PermGenspace 方法区溢出也是一种常见的内存溢出异常，一个类如果要被垃圾收集器回收，判定条件是很苛刻的。在 经常动态生成大量Class的应用中，要特别注意这点。 SOF（堆栈溢出StackOverﬂow）：StackOverﬂowError 的定义：当应用程序递归太深而发生堆栈溢出时，抛出该错误。 因为栈一般默认为1-2m，一旦出现死循环或者是大量的递归调用，在不断的压栈过程中，造成栈容量 超过1m而导致溢出。 栈溢出的原因：递归调用，大量循环或死循环，全局变量是否过多，数组、List、map数据过大。","categories":[{"name":"面试题","slug":"面试题","permalink":"https://nzgong.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://nzgong.com/tags/Java/"},{"name":"面试","slug":"面试","permalink":"https://nzgong.com/tags/%E9%9D%A2%E8%AF%95/"}]},{"title":"JVM&Java虚拟机","slug":"JVM-Java虚拟机","date":"2021-06-30T01:44:57.000Z","updated":"2021-06-30T09:39:45.244Z","comments":true,"path":"archives/6037eeb8.html","link":"","permalink":"https://nzgong.com/archives/6037eeb8.html","excerpt":"","text":"","categories":[{"name":"Java","slug":"Java","permalink":"https://nzgong.com/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://nzgong.com/tags/Java/"},{"name":"JVM","slug":"JVM","permalink":"https://nzgong.com/tags/JVM/"}]},{"title":"博客备份","slug":"博客备份","date":"2021-06-29T03:16:10.000Z","updated":"2021-06-30T06:36:38.640Z","comments":true,"path":"archives/34169.html","link":"","permalink":"https://nzgong.com/archives/34169.html","excerpt":"","text":"备份博客创建新分支打开自己的github里存放博文页面文件的仓库（确保已有主分支），建立一个新的分支hexo，并将其设置为默认分支。 本地的博客原始目录里只有.deploy_git文件（里面存放的是上传到博客仓库的页面文件），并没有.git文件，所以要先在其他地方新建空目录，将仓库的hexo分支clone下来，再将里面的.git文件复制到本地的博客目录中。 检查主题文件下有没有克隆时产生的.git文件，有的话要删掉，因为git不能嵌套上传，会导致主题文件无法上传，备份出问题。 备份在博客根目录下执行如下命令 $ git add . $ git commit -m \"备份\" $ git push origin hexo 日常更新命令hexo clean git add . git commit -m \"备份\" git push hexo g hexo d 恢复博客克隆项目到本地$ git clone https://github.com/yourgithubname/yourgithubname.github.io 恢复博客$ npm install hexo-cli $ npm install $ npm install hexo-deployer-git","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://nzgong.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"博客","slug":"博客","permalink":"https://nzgong.com/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"备份","slug":"备份","permalink":"https://nzgong.com/tags/%E5%A4%87%E4%BB%BD/"}]}],"categories":[{"name":"SpringCloud","slug":"SpringCloud","permalink":"https://nzgong.com/categories/SpringCloud/"},{"name":"面试题","slug":"面试题","permalink":"https://nzgong.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"name":"Java","slug":"Java","permalink":"https://nzgong.com/categories/Java/"},{"name":"博客搭建","slug":"博客搭建","permalink":"https://nzgong.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://nzgong.com/tags/Java/"},{"name":"框架","slug":"框架","permalink":"https://nzgong.com/tags/%E6%A1%86%E6%9E%B6/"},{"name":"面试","slug":"面试","permalink":"https://nzgong.com/tags/%E9%9D%A2%E8%AF%95/"},{"name":"JVM","slug":"JVM","permalink":"https://nzgong.com/tags/JVM/"},{"name":"博客","slug":"博客","permalink":"https://nzgong.com/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"备份","slug":"备份","permalink":"https://nzgong.com/tags/%E5%A4%87%E4%BB%BD/"}]}